# [[language]]
# name = "typescript"
# auto-format = false
# formatter = { command = "prettier", args = ["--parser", "typescript"] }
# language-servers = ["typescript-language-server", "eslint"]

# [[language]]
# name = "javascript"
# auto-format = false
# formatter = { command = "prettier", args = ["--parser", "typescript"] }
# language-servers = ["typescript-language-server", "eslint"]

# [[language]]
# name = "tsx"
# auto-format = false
# formatter = { command = "prettier", args = ["--parser", "typescript"] }
# language-servers = ["typescript-language-server", "eslint"]

# [[language]]
# name = "jsx"
# auto-format = false
# formatter = { command = "prettier", args = ["--parser", "typescript"] }
# language-servers = ["typescript-language-server", "eslint"]

# [[language]]
# language-servers = [{except-features = ["format"], name = "typescript-language-server"}, "eslint"]
# name = "typescript"

# [[language]]
# language-servers = [{except-features = ["format"], name = "typescript-language-server"}, "eslint"]
# name = "javascript"

# [[language]]
# language-servers = [{except-features = ["format"], name = "typescript-language-server"}, "eslint"]
# name = "jsx"

# [[language]]
# language-servers = [{except-features = ["format"], name = "typescript-language-server"}, "eslint"]
# name = "tsx"

# [language-server.eslint]
# command = "vscode-eslint-language-server"
# args = ["--stdio"]

# [language-server.eslint.config]
# validate = "on"
# experimental = { useFlatConfig = false }
# rulesCustomizations = []
# run = "onType"
# problems = { shortenToSingleLine = false }
# nodePath = ""

# [language-server.eslint.config.codeAction]
# disableRuleComment = { "enable" = true, "location" = "sameLine" }
# showDocumentation = { "enable" = true }
# mode = "all"

# --------

[[language]]
language-servers = [{except-features = ["format"], name = "typescript-language-server"}, "eslint"]
formatter = { command = 'prettier', args = ["--parser", "typescript"] }
name = "typescript"
# auto-format = true

[[language]]
language-servers = [{except-features = ["format"], name = "typescript-language-server"}, "eslint"]
name = "javascript"
# auto-format = true

[[language]]
language-servers = [{except-features = ["format"], name = "typescript-language-server"}, "eslint"]
name = "jsx"
auto-format = true

[[language]]
language-servers = [{except-features = ["format"], name = "typescript-language-server"}, "eslint"]
formatter = { command = 'prettier', args = ["--parser", "typescript"] }
name = "tsx"
# auto-format = true

[[language]]
name = "html"
auto-format = true

[language-server.eslint]
args = ["--stdio"]
command = "vscode-eslint-language-server"

# [language-server.eslint.config]
# format = true
# nodePath = ""
# onIgnoredFiles = "off"
# quiet = false
# rulesCustomizations = []
# run = "onType"
# validate = "on"

[language-server.eslint.config]
validate = "on"
experimental = { useFlatConfig = false }
rulesCustomizations = []
run = "onType"
problems = { shortenToSingleLine = false }
nodePath = ""

[language-server.eslint.config.codeAction]
[language-server.eslint.config.codeAction.disableRuleComment]
enable = true
location = "separateLine"

[language-server.eslint.config.codeAction.showDocumentation]
enable = true

[language-server.eslint.config.codeActionOnSave]
enable = true
mode = "all"

[language-server.eslint.config.workingDirectory]
mode = "location"

[language-server.typescript-language-server]
args = ["--stdio"]
command = "typescript-language-server"

[language-server.typescript-language-server.config]
documentFormatting = false

# # FROM REDDIT https://www.reddit.com/r/HelixEditor/comments/16nu7rh/how_can_i_setup_typescript_eslint_prettier/

 [[language]]
 name = "typescript"
 language-servers = [  "typescript-language-server", "tailwindcss-react", "eslint"]
 formatter = { command = 'npx', args = ["prettier", "--parser", "typescript"] }
 auto-format = true

 [[language]]
 name = "tsx"
 language-servers = [ "typescript-language-server", "tailwindcss-react", "eslint", "emmet-language-server"]
 formatter = { command = 'npx', args = ["prettier", "--parser", "typescript", "--plugin", "prettier-plugin-tailwindcss"] }
 auto-format = true

 [[language]]
 name = "jsx"
 language-servers = [ "typescript-language-server", "tailwindcss-react", "eslint"]
 grammar = "javascript"
 formatter = { command = 'npx', args = ["prettier", "--parser", "typescript"] }
 auto-format = true

#  [[language]]
#  name = "javascript"
#  language-servers = [ "typescript-language-server", "tailwindcss-react", "eslint"]
#  formatter = { command = 'npx', args = ["prettier", "--parser", "typescript"] }
#  auto-format = true

#  [[language]]
#  name = "json"
#  language-servers = [ "vscode-json-language-server" ]
#  formatter = { command = 'npx', args = ["prettier", "--parser", "json"] }
#  auto-format = true

#  [language-server.vscode-json-language-server.config]
#  json = { validate = { enable = true }, format = { enable = true } }
#  provideFormatter = true

#  [language-server.vscode-css-language-server.config]
#  css = { validate = { enable = true } }
#  scss = { validate = { enable = true } }
#  less = { validate = { enable = true } }
#  provideFormatter = true

 [[language]]
 name = "html"
 formatter = { command = 'npx', args = ["prettier", "--parser", "html"] }
 language-servers = [ "vscode-html-language-server", "tailwindcss-react","emmet-language-server"]
 
 [[language]]
 name = "css"
 formatter = { command = 'npx', args = ["prettier", "--parser", "css"] }
 language-servers = [ "vscode-css-language-server", "tailwindcss-react"]

#  [language-server.eslint]
#  args = ["--stdio"]
#  command = "vscode-eslint-language-server"

#  [language-server.eslint.config]
#  format = true
#  nodePath = ""
#  onIgnoredFiles = "off"
#  packageManager = "yarn"
#  quiet = false
#  rulesCustomizations = []
#  run = "onType"
#  useESLintClass = false
#  validate = "on"
#  codeAction = { disableRuleComment = { enable = true, location = "separateLine" }, showDocumentation = { enable = true } }
#  codeActionOnSave = { mode = "all" }
#  experimental = { }
#  problems = { shortenToSingleLine = false }
#  workingDirectory = { mode = "auto" }

#  [language-server.emmet-language-server]
#  command="emmet-language-server"
#  args = ["--stdio"]


 [language-server.tailwindcss-react]
 language-id = "typescriptreact"
 command = "tailwindcss-language-server"
 args = ["--stdio"]
 config = {}

#  [language-server.typescript-language-server.config]
#  documentFormatting = false
#  hostInfo = "helix"

#  [language-server.typescript-language-server.config.typescript.inlayHints]
#  includeInlayEnumMemberValueHints = true
#  includeInlayFunctionLikeReturnTypeHints = true
#  includeInlayFunctionParameterTypeHints = true
#  includeInlayParameterNameHints = "all"
#  includeInlayParameterNameHintsWhenArgumentMatchesName = true
#  includeInlayPropertyDeclarationTypeHints = true
#  includeInlayVariableTypeHints = true

#  [language-server.typescript-language-server.config.completions]
# completeFunctionCalls = true

#  [language-server.typescript-language-server.config.javascript.inlayHints]
#  includeInlayEnumMemberValueHints = true
#  includeInlayFunctionLikeReturnTypeHints = true
#  includeInlayFunctionParameterTypeHints = true
#  includeInlayParameterNameHints = "all"
#  includeInlayParameterNameHintsWhenArgumentMatchesName = true
#  includeInlayPropertyDeclarationTypeHints = true
#  includeInlayVariableTypeHints = true

